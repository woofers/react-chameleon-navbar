{"version":3,"sources":["app.js","index.js"],"names":["App","randColor","random","toString","_useState","useState","_useState2","Object","slicedToArray","color","setColor","_useState3","_useState4","attrs","setAttrs","_useState5","_useState6","background","setBackground","useInterval","setTimeout","fields","tags","Array","from","document","getElementsByTagName","filter","meta","includes","getAttribute","map","name","value","sort","a","b","localeCompare","apple","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","attr","err","return","all","css","_templateObject","full","_templateObject2","inner","_templateObject3","header","_templateObject4","bold","_templateObject5","italic","_templateObject6","container","_templateObject7","start","_templateObject8","end","_templateObject9","max","_templateObject10","core_browser_esm","styles","Helmet_default","title","htmlAttributes","lang","react_chameleon_theme_color_min","key","startsWith","toUpperCase","ReactDOM","render","react_default","createElement","app","getElementById"],"mappings":"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","file":"static/js/main.13605916.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, css, Global } from '@emotion/core'\nimport { useState } from 'react'\nimport { ChameleonThemeColor as Chameleon } from 'react-chameleon-theme-color'\nimport Helmet from 'react-helmet'\nimport useInterval from '@use-it/interval'\nimport { random } from 'chroma-js'\n\nconst App = () => {\n  const randColor = () => random().toString()\n  const [color, setColor] = useState(false)\n  const [attrs, setAttrs] = useState(false)\n  const [background, setBackground] = useState(false)\n  const step = 2000\n  const delay = 10\n  useInterval(() => {\n    setColor(randColor())\n    setBackground(randColor())\n    setTimeout(() => {\n      const metas = fields => {\n          const tags = Array.from(document.getElementsByTagName('meta'))\n          return tags.filter(meta => {\n              return fields.includes(meta.getAttribute('name'))\n          })\n      }\n      let tags = metas(['theme-color', 'apple-mobile-web-app-status-bar-style', 'msapplication-navbutton-color'])\n      tags = tags.map(meta => {\n        return {\n          name: meta.getAttribute('name'),\n          value: meta.getAttribute('content')\n        }\n      }).sort((a, b) => a.name.localeCompare(b.name))\n      setAttrs(tags)\n    }, delay)\n  }, step)\n  const apple = () => {\n    if (!attrs) return false\n    for (const attr of attrs) {\n      if (attr.name === 'apple-mobile-web-app-status-bar-style') return attr\n    }\n    return false\n  }\n  const useWhite = () => apple() ? apple().value !== 'default' : false\n  const all = css`\n    @import url('https://fonts.googleapis.com/css?family=IBM+Plex+Sans:300i,400,700&display=swap');\n    * {\n      font-family: 'IBM Plex Sans', sans-serif;\n      line-height: 30px;\n    }\n    @media only screen and (max-width: 768px) {\n      h1 {\n        font-size: 21px;\n      }\n      div {\n        font-size: 12px;\n      }\n    }\n    ::selection {\n      background: rgba(0, 132, 255, 0.4);\n    }\n  `\n  const full = css`\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: ${background};\n  `\n  const inner = css`\n    background: ${color};\n    color: ${useWhite() ? '#fff' : '#000'};\n    padding: 100px 0;\n    @media only screen and (max-width: 768px) {\n      padding: 50px 0;\n    }\n  `\n  const header = css`\n    font-weight: 700;\n  `\n  const bold = css`\n    font-weight: bold;\n  `\n  const italic = css`\n    font-weight: 300;\n    font-style: italic;\n  `\n  const container = css`\n    display: flex;\n    justify-content: space-between;\n    text-align: left;\n  `\n  const start = css`\n    align-content: flex-start;\n    align-self: center;\n  `\n  const end = css`\n    align-content: flex-end;\n    align-self: center;\n  `\n  const max = css`\n    max-width: 1000px;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 50px;\n    @media only screen and (max-width: 768px) {\n      max-width: 500px;\n      padding: 25px;\n    }\n  `\n  return (\n    <div css={full}>\n      <Global styles={all}/>\n      <Helmet\n        title={'react-chameleon-theme-color'}\n        htmlAttributes={{ lang: 'en' }}>\n      </Helmet>\n      <div css={inner}>\n        <Chameleon />\n          <div css={max}>\n            <h1 css={header}>react-chameleon-theme-color</h1>\n            <div css={container}>\n              <div css={start}>\n              {attrs ? attrs.map(attr => {\n                  return (<div key={attr.name} css={bold}>{attr.name}</div>)\n              }) : null}\n              </div>\n              <div css={end}>\n              {attrs ? attrs.map(attr => {\n                const value = attr.value.startsWith('rgb') ? attr.value.toUpperCase() : attr.value\n                return (<div key={attr.name + attr.value} css={italic}>{value}</div>)\n              }) : null}\n              </div>\n            </div>\n          </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}